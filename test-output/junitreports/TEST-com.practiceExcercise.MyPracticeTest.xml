<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitReportReporter -->
<testsuite hostname="DESKTOP-6FM5GAH" failures="0" tests="10" name="com.practiceExcercise.MyPracticeTest" time="1.117" errors="1" timestamp="2023-10-09T19:26:25 IST" skipped="0">
  <testcase classname="com.practiceExcercise.MyPracticeTest" name="excelRead" time="1.001"/>
  <testcase classname="com.practiceExcercise.MyPracticeTest" name="dataProvider" time="0.002"/>
  <testcase classname="com.practiceExcercise.MyPracticeTest" name="date1" time="0.041"/>
  <testcase classname="com.practiceExcercise.MyPracticeTest" name="excelWrite" time="0.057">
    <error message="The workbook already contains a sheet named &#039;India&#039;" type="java.lang.IllegalArgumentException">
      <![CDATA[java.lang.IllegalArgumentException: The workbook already contains a sheet named 'India'
at org.apache.poi.xssf.usermodel.XSSFWorkbook.validateSheetName(XSSFWorkbook.java:914)
at org.apache.poi.xssf.usermodel.XSSFWorkbook.createSheet(XSSFWorkbook.java:867)
at org.apache.poi.xssf.usermodel.XSSFWorkbook.createSheet(XSSFWorkbook.java:123)
at com.practiceExcercise.MyPracticeTest.excelWrite(MyPracticeTest.java:67)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:227)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:957)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:200)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:848)
at org.testng.TestRunner.run(TestRunner.java:621)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:481)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:58)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:833)
]]>
    </error>
  </testcase> <!-- excelWrite -->
  <testcase classname="com.practiceExcercise.MyPracticeTest" name="randomnumber" time="0.002"/>
  <testcase classname="com.practiceExcercise.MyPracticeTest" name="dataProvider" time="0.008"/>
  <testcase classname="com.practiceExcercise.MyPracticeTest" name="dataProvider" time="0.001"/>
  <testcase classname="com.practiceExcercise.MyPracticeTest" name="propertyFile" time="0.002"/>
  <testcase classname="com.practiceExcercise.MyPracticeTest" name="dataProvider" time="0.002"/>
  <testcase classname="com.practiceExcercise.MyPracticeTest" name="getSystemInDate" time="0.001"/>
  <system-out>
    <![CDATA[All States1858182774]]>
  </system-out>
</testsuite> <!-- com.practiceExcercise.MyPracticeTest -->
